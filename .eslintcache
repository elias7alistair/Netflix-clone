[{"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\index.js":"1","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\App.js":"2","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\reportWebVitals.js":"3","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Navbar.js":"4","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Row.js":"5","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Request.js":"6","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Banner.js":"7","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Footer.js":"8","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\axios.js":"9","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\utils.js":"10","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\components\\Loader\\Loader.js":"11","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\components\\LoaderQuotes\\LoaderQoutes.js":"12"},{"size":517,"mtime":1660889955741,"results":"13","hashOfConfig":"14"},{"size":1894,"mtime":1665900427575,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1660889955742,"results":"16","hashOfConfig":"14"},{"size":878,"mtime":1660890812897,"results":"17","hashOfConfig":"14"},{"size":2264,"mtime":1660889955740,"results":"18","hashOfConfig":"14"},{"size":718,"mtime":1665900417296,"results":"19","hashOfConfig":"14"},{"size":1393,"mtime":1660889955737,"results":"20","hashOfConfig":"14"},{"size":387,"mtime":1660889955738,"results":"21","hashOfConfig":"14"},{"size":138,"mtime":1660889955741,"results":"22","hashOfConfig":"14"},{"size":100,"mtime":1660889955742,"results":"23","hashOfConfig":"14"},{"size":185,"mtime":1665896078020,"results":"24","hashOfConfig":"14"},{"size":693,"mtime":1665899186482,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1btnleu",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\index.js",[],["53","54"],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\App.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\reportWebVitals.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Navbar.js",["55"],"import React, { useState, useEffect } from \"react\";\r\nimport netflixLogo from \"./netflixLogo.png\";\r\nimport \"./Navbar.css\";\r\n\r\n\r\nfunction Navbar() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n   \r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`navbar ${show && \"navbar__black\"}`}>\r\n \r\n    <div className={'logo_name'}>Alistair's</div> \r\n     <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n        alt=\"Netflix\"\r\n        className=\"Navbar__logo\"\r\n      />\r\n      <img src={netflixLogo} className=\"Navbar__avatar\" alt=\"profile image\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Row.js",["56","57"],"import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport axios from \"./axios\";\r\nimport './Row.css'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl,isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [ trailerUrl,setTrailerUrl] = useState(\"\")\r\n\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n    // if array empty run once only when row loads.\r\n  }, [fetchUrl]);\r\n  // something new to get array in data format\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  }\r\n\r\n  const handleOnclick = (movie)=>{\r\n    console.table(movie)\r\n    if (trailerUrl != \"\"){\r\n      setTrailerUrl(\"\");\r\n    }\r\n    else {\r\n    \r\n      movieTrailer(movie?.name || movie?.title || \"\")\r\n      .then ( (url) => {\r\n        const urlParams = new URLSearchParams(new URL(url).search)\r\n       setTrailerUrl(urlParams.get(\"v\"))\r\n        //console.log(urlParams.get(\"v\"))\r\n      })\r\n      .catch((error)=> console.log(\"nnnnnnnn\",error))\r\n    }\r\n  }\r\n  // const handleClick = (movie) => {\r\n  //   // console.table(movie?.title)\r\n  //   if (trailerUrl != \"\") setTrailerUrl(\"\");\r\n  //    else {\r\n  //     movieTrailer(movie?.name || movie?.title)\r\n  //     .then(ur => {\r\n  //       const urlParams = new URLSearchParams(new URL(ur).search);\r\n  //       setTrailerUrl(urlParams.get(\"v\"));\r\n  //     })\r\n  //     .catch(err => console.log(err));\r\n  //   }\r\n  // }\r\n\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n      <div className=\"row__posters\">\r\n        {movies.map((data) => (\r\n          <img\r\n            onClick={()=>{handleOnclick(data)}}\r\n            key={data.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n            src={`${baseUrl}${isLargeRow ? data.poster_path : data.backdrop_path}`}\r\n            alt={data.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl != \"\"  && <YouTube  videoId={trailerUrl}  opts={opts}/> }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Request.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Banner.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\Footer.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\axios.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\utils.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\components\\Loader\\Loader.js",[],"C:\\Users\\alistair\\Desktop\\git personal\\Netflix-clone\\src\\components\\LoaderQuotes\\LoaderQoutes.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":29,"column":7,"nodeType":"64","endLine":29,"endColumn":79},{"ruleId":"65","severity":1,"message":"66","line":35,"column":20,"nodeType":"67","messageId":"68","endLine":35,"endColumn":22},{"ruleId":"65","severity":1,"message":"66","line":77,"column":19,"nodeType":"67","messageId":"68","endLine":77,"endColumn":21},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]